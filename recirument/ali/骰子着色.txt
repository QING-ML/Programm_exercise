
//'S' start, '#'可通行区域
//'E' end，'.' other
//     3
//骰子 1265
//     4
//没有分叉的单一路径， 骰子转动经过每个节点，并留下数字，求带数字的地图


#include <iostream>
#include <vector>

using namespace std;

void BFS(pair<int,int> &current_point, int number,vector<pair<int, int>> &points, vector<string> &map_c, int &n) {
	if (map_c[current_point.first][current_point.second] == 'E') {
		map_c[current_point.first][current_point.second] = number;
		return;
	}
	static const int dx[] = { 1, 0, -1, 0 };
	static const int dy[] = { 0, 1, 0, -1 };
	static const int num_1[] = { 6,2,1,5 };
	static const int num_2[] = { 6,3,1,4 }; {3, 2, 4, 5}

	map_c[current_point.first][current_point.second] = number;

	for (int i = 0; i < 4; i++) {
		if(current_point.first + dx[i] < n && current_point.first + dx[i] >=0 &&
			current_point.second + dy[i] <n && current_point.second + dy[i] >= 0)
		if (map_c[current_point.first + dx[i]][current_point.second + dy[i]] == '#'
			|| map_c[current_point.first + dx[i]][current_point.second + dy[i]] == 'E' ) {
			current_point.first = current_point.first + dx[i];
			current_point.second = current_point.second + dy[i];
			number = ;
			BFS(current_point, number,points, map_c, n);
			break;
		}
	}

}

int main() {
	int T;
	cin >> T;
	while (T != 0) {
		int n;
		cin >> n;
		vector<string> map_c;
		vector<pair<int, int>> points;
		//initialize map
		for (int i = 0; i < n; i++) {
			string temp_str;
			for (int j = 0; j < n; j++) {
				char temp_c;
				cin >> temp_c;
				if (temp_c == 'S') {
					points.push_back(make_pair(i, j));
				}
				else if (temp_c == 'E') {
					points.push_back(make_pair(i, j));
				}
				temp_str.push_back(temp_c);
			}
			map_c.push_back(temp_str);
		}

		BFS(points[0], 6, points, map_c, n);



		T = T - 1;
	}
}

//勇士屠龙游戏