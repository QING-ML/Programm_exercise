/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/
//深度拷贝，即使原列表被销毁，新列表也能使用
class Solution {
public:
    Node* copyRandomList(Node* head) {
        std::map<Node*, int> node_map;
        std::vector<Node*> node_vec;
        Node* Ptr = head;
        int i = 0;
        while(Ptr){
            //creat new address for copylist
            node_vec.push_back(new Node(Ptr->val));
            //creat
            node_map.insert(std::pair<Node*,int>(Ptr, i));
            Ptr = Ptr->next;
            i++;
        }
        node_vec.push_back(0);
        Ptr = head;
        i = 0;
        while(Ptr){
            if(Ptr->next){
                node_vec[i]->next = node_vec[i + 1];
            }
            if(Ptr->random){
                int id = node_map[Ptr->random];
                node_vec[i]->random = node_vec[id];
            }
            Ptr = Ptr->next;
            i++;
        }
        return node_vec[0];
        
    }
};